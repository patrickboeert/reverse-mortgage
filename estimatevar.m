% ESTIMATEVAR  estimate VAR process
%
% vgxset        - defines model specification
% vgxdisp       - displays model information
% vgxvarx       - estimate model parameters
% vgxcount      - count number of estimated parameters
% lratiotest    - do likelihood ratio test on model specifications
% aicbic        - Akaike information criterion
% vgxqual       - determines stability of a model

%% setup
maxP        = 4;
nSeries     = 3;
alpha       = 0.01;
nSimPeriods = 100;
desiredp    = 2;

%% load data
p = (0:maxP)';
load vardata.mat vardata

Y = [vardata{1}.index(:,12),...        
     vardata{4}.index(:,2),...
     vardata{2}.index(:,2)];
   

%% compute VAR(p) model
for i = 1:length(p)
  
  % define VAR(p) models
  specification(i) = vgxset('n',nSeries,...
                            'nAR',p(i),...
                            'Constant', true,...                              
                            'Series',{vardata{1}.name{12},...
                                      vardata{4}.description,...
                                      vardata{2}.description});                                                                                
  
  % get log-likelihood statistic to determine number of lags
  % with lratiotest, estimation uses maximum likelihood
  [estimation(i), EstStdErrors(i), LLF(i), W{i}] = vgxvarx(specification(i),...
                                                           Y((p(i)+1):end,:),...
                                                           [],...
                                                           Y(1:p(i),:));
  
  % get number of active parameter in model
  [NumParam(i),NumActive(i)] = vgxcount(estimation(i));
end

%% test for best lag structure
% get test results of likelihood ratio test at level alpha
reject = NaN(length(p),length(p));
pvalue = NaN(length(p),length(p));

for i = 1:length(p)
  if p(i)>0
    for j = 1:(i-1)
      [reject(i,j), pvalue(i,j)] = lratiotest(LLF(i),LLF(j),NumActive(i) - NumActive(j),alpha);
    end
  end
end

% get Akaike information criterion
AIC = aicbic(LLF,NumActive);

%% simulate

Ysim = vgxsim(estimation(desiredp+1),...
              nSimPeriods,...
              [],...
              Y(end-desiredp:end,:),...
              [],...
              2000);
            
Ymean = mean(Ysim,3); % Calculate means
Ystd = std(Ysim,0,3); % Calculate std deviations
%If you scaled a series with diff(log), transform predictions 
%of the corresponding model with cumsum(exp). cumsum is the inverse of diff;
%it calculates cumulative sums. As in integration, you must choose an appropriate
%additive constant for the cumulative sum. For example, take the log of the
%final entry in the corresponding data series, and use it as the first term in
%the series before applying cumsum. For examples of using this technique with
%predictions generated by both vgxpred and by a simulation (vgxsim or vgxproc)
%, see Forecasting.

